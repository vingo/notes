                                        v8 垃圾回收 
默认node内存大小： 64位 1.4G 32位 0.7G
手动更新 max-old-space-size /max-new-space-size 
1.策略： 分代式 垃圾回收
2. 内存分代： 新生代+ 老生代
    ------------------------------------------------------
    |新生代内存空间  |      老生代内存空间                  |
    ------------------------------------------------------
3. scavenge 算法 （适合 新生代内存）
   采用复制的方式实现垃圾回收。它将堆分成2部分 一个处于使用状态 叫：From，另一个闲置叫： To。
   垃圾回收时先检测From对象，存活的对象会复制到To空间中，非存活的对象占用的空间就会被释放。
   优点： 适合新生代内存空间
   缺点： 只能使用堆内存的一半 
    ----新生代-------------老生代内存空间-------------------
    |From|To  |                                          |
    ------------------------------------------------------
    实际使用的堆内存= from+to+老生代内存
    对于一个对象对此的被复制依然存活的对象叫：生命周期较长的对象 将会被移到 老生代内存中。 这个过程叫：晋升
4. mark-sweep算法   标记清除 
    4.1 mark-sweep 分为标记和清除两个阶段。 在标记阶段便利堆中的对象并标记存活着的对象，在随后的清除阶段删除未标记的对象。
        缺点：mark-sweep 垃圾回收后会出现内存空间不连续的状态，当出现要分配大对象的时候由于分配不了，触发垃圾回收。
5. mark-compact算法  标记整理 解决内存碎片的问题
    在对象标记死亡后，在整理的过程中，将活着的对象往一端移动，移动完成后直接清理掉边界外的内存。



